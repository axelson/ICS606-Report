#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass IEEEtran
\use_default_options false
\language english
\inputencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement tbh
\paperfontsize 12
\spacing double
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize letterpaper
\use_geometry true
\use_amsmath 0
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 2
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Teamwork Among Intelligent Autonomous Agents in a Robocode Environment
\end_layout

\begin_layout Author
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Remember that initial submissions don't show the authors
\end_layout

\begin_layout Plain Layout
names so you'll need to make this a 'Comment'.
\end_layout

\end_inset

Jason Axelson, Chris Ho
\end_layout

\begin_layout Abstract
This is a report on our progress and development for our final project.
 This paper introduces the Robocode environment, the objectives that were
 set and met during the course of the project, and the design methodology
 and strategies implemented in the realization of the final product.
\end_layout

\begin_layout MarkBoth
ICS 606 Progress Report
\begin_inset ERT
status open

\begin_layout Plain Layout

}{
\end_layout

\end_inset

ICS 606 Progress Report
\end_layout

\begin_layout Section
Introduction
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Don't panic the section numbering may look different in
\end_layout

\begin_layout Plain Layout
LyX but LaTeX uses the correct Roman numerals and
\end_layout

\begin_layout Plain Layout
Alpha for section counters.
\end_layout

\begin_layout Plain Layout
It's just that LyX doesn't handle counters other than arabic
\end_layout

\begin_layout Plain Layout
numerals.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
PARstart{R}{obocode}
\end_layout

\end_inset

 is an intelligent autonomous agent architecture that involves the composition
 of software to control a miniature tank in a hostile playing field.
 The each round, the playing field is populated with tanks that are identical
 in anatomy (excluding droids, which are a subset of the team-play bots
 and will be referred to as droids to avoid potential confusion), but vary
 in software.
 As introduced on the Wikipedia page on Robocode, “although the idea of
 [the game] may seem simple, the actual strategy needed to win is not.” [12]
 The robots are allowed to move freely about the environment and scan the
 field for other tanks, as well as shoot at and collide with other robots.
 Many different techniques have been developed and implemented by the top
 bots in the game, some of these include intelligent movement (adapting
 to enemy patterns to avoid damage from enemy fire) and statistical targeting.
 Robocode has presented the intelligent autonomous agent field with another
 research domain, which we plan to investigate.
 The domain allows the growth and development of intelligent autonomous
 agents to be tested and measured scientifically, practically, and recreationall
y.
\end_layout

\begin_layout Section
Backround Research
\end_layout

\begin_layout Standard
To properly utilize the tools offered by Robocode, we first had to understand
 the rules and physics that govern the environment.
 Also necessary was our responsibility to gain a reasonable comprehension
 of the battle manager, which manages and executes all operations during
 each round.
\end_layout

\begin_layout Standard
All robots in Robocode are comprised of three semi-physical elements: a
 radar, a turret, and a body.
 The three elements are mounted upon each other in the order mentioned.
 Observing Robocode physics and intuition, the radar, turret, and body are
 all able to receive distinct instructions, however, because of their location,
 the observed movement demonstrates their dependence (e.g., if the turret,
 which is mounted on the body, is rotated at a certain rate, the rate of
 rotation, relative to the battlefield is its rotation rate added to the
 rotation rate of the body).
 Regarding translational movement, robots in the Robocode environment accelerate
 and decelerate, as opposed to instantaneously achieving a maximum velocity,
 when moving from one point to another.
\end_layout

\begin_layout Standard
The concept of time is captured through ticks.
 Every turn in a battle is a single tick long.
 The battle manager of Robocode is a built-in loop that controls the game.
 As shown in figure
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Battle-manager"

\end_inset

, each robot possesses its own thread, which also contains a queue of events
 generated throughout the game.
 These events are handled by the robot, themselves.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide true
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename battle-manager-diagram.gif

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Battle manager and Robocode threading model
\begin_inset CommandInset label
LatexCommand label
name "fig:Battle-manager"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Initial Objectives
\end_layout

\begin_layout Standard
All objective, deliverables, and research questions have not changed because
 of their likely feasibility with the allotted time.
 We are proposing an experimental project based on the Robocode artificial
 intelligence architecture.
 The main objective of the project is to demonstrate the ability and the
 power of intelligent teamwork to overcome numerical disadvantage.
 This will be demonstrated by designing a small team of bots that are able
 to effectively use teamwork to overcome the superior numbers of an enemy
 team.
 The main deliverable of the project is the final written report.
 The report will detail our findings and analysis of the capabilities of
 our robots.
\end_layout

\begin_layout Section
Accomplished Objectives
\end_layout

\begin_layout Section
Approach
\end_layout

\begin_layout Standard
To acquaint ourselves with the domain created by Robocode, we started by
 reading journal articles (such as the Evolution of emergent behaviors for
 shooting game characters in robocode 
\begin_inset CommandInset citation
LatexCommand cite
key "EvolutionEmergentBehaviors"

\end_inset

) that describe the current state of the field.
 We also read through the informative articles on the Robocode wiki that
 detail common strategies and techniques.
 We will also begin implementing the basic strategies that our bots will
 use, such as wave surfing, statistical targeting, and circular targeting.
\end_layout

\begin_layout Standard
Initially, we will started with a simple bot as a proof-of-concept.
 Next we graduated to building a 1-vs-1 bot to help perfect many of the
 individual techniques.
 This stage is still in progress and is seen as an invaluable stage for
 development.
 After the 1-vs-1 bot, we will move on to so-called melee bots that are
 involved in at least 3-way (often 10-way) free-for-all's.
 The final stage in the project will be to build a multi-agent system that
 works together to eliminate enemy bots (individual or teams).
\end_layout

\begin_layout Standard
After the experimental phase of the project is complete, we will begin to
 write up our findings for our final report.
 We will analyze the results of the experimental phase and numerically analyze
 the results of the battles and compare the data to the theory on which
 it is based.
\end_layout

\begin_layout Section
Design Methodology
\end_layout

\begin_layout Subsection
Targeting
\end_layout

\begin_layout Subsubsection
Guess Factor Targeting
\end_layout

\begin_layout Standard
A few calculations must be performed to follow the traditional means of
 implementing Guess Factor targeting.
 A realization of two limits must first be calculated.
 The first is how far foward the tracked bot can travel at full speed in
 the time it would take for the fired bullet to reach the bot.
 The other is how far the bot can travel, except in the opposite direction.
 Being a form of statistical targeting, a guess between -1 and 1 is performed,
 with -1 being the latter calculated point and 1 being the formerly calculated
 point.
 The results (hit or not) are recorded and further guess work is performed
 with these results in mind.
\end_layout

\begin_layout Subsubsection
Linear Targeting
\end_layout

\begin_layout Standard
Linear targeting is based off the expectation that the enemy bot holds its
 current heading and speed.
 When considering linear targeting, an approximation can be used to reduce
 the amount of code space allocated to its implementation.
 This method of implementation is summarized first.
 Staying true to the belief that the bot will maintain both heading and
 velocity, the lateral velocity of the tracked bot is calculated.
 This is the velocity parallel to the tracking bot.
 A firing angle offset is then calculated to compensate for this lateral
 velocity.
 This is the angle at which the tracking bot must fire to successfully hit
 the targeted bot if its current course is maintained.
 The calculation performed to obtain this angle is first to find the offset
 angle (
\begin_inset Formula $\theta$
\end_inset

).
\begin_inset Formula \[
\theta=\frac{\sin^{-1}(v_{l}*t)}{v_{b}*t}\]

\end_inset


\end_layout

\begin_layout Standard
Where 
\begin_inset Formula $\theta$
\end_inset

 is the offset angle, 
\begin_inset Formula $v_{l}$
\end_inset

 is the lateral velocity, 
\begin_inset Formula $t$
\end_inset

 is the bullet travel time, and 
\begin_inset Formula $v_{b}$
\end_inset

 is the bullet velocity (which then depends firepower).
 When using applying the sine function to both sides and using small-angle
 approximations, the first angle is approximately equivalent to the quotient
 of the lateral velocity and the bullet velocity.
 This final firing angle is then calculated by taking into account the absolute
 bearing and the gun heading by adding and then subtracting, respectively.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Explain exact method.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Circular Targeting
\end_layout

\begin_layout Standard
Circular targeting is the strategy implemented which is analogous to linear
 targeting, except the targeted bot is believed to be maintaining its current
 turn rate and current velocity, or otherwise said to be moving in circles
 or arcs.
 When implementing this targeting method, two obvious values must be obtained.
 The first calculation requires two scans to determines the bot's turning
 rate.
 This approximation is performed by taking the difference between the bot's
 headings and scaling appropriately by the time period between scans.
 Next, the current position of the target bot is determined.
 Because the assumption that the target will continue to follow the circle
 it is currently traversing is followed, its position can be predicted.
\end_layout

\begin_layout Standard
Like linear targeting, the time at which the fired bullet will hit the targeted
 bot is essential.
 First, the time it would take for a bullet to arrive at the target's current
 position is calculated.
 However, to improve the approximation, an iterative method is adopted.
 Presenting equations provided by a circular targeting tutorial, it can
 be seen that a prediction of the tracked bot's position at an arbitrary
 time can be obtained.
\end_layout

\begin_layout Standard
http://robowiki.net/wiki/Circular_Targeting/Walkthrough
\end_layout

\begin_layout Subsection
Movement
\end_layout

\begin_layout Subsubsection
Wave Surfing
\end_layout

\begin_layout Standard
A strategy typically implemented during 1 vs.
 1 situations is wave surfing.
 Because bots in robocode have no information on where bullets are in the
 arena, energy levels must be monitored to predict bullet locations.
 When tracking an enemy bot, drops in energy levels provide an accurate
 way of tracking an enemy's wave.
 This tracked wave 
\end_layout

\begin_layout Subsubsection
Minimum-risk Movement
\end_layout

\begin_layout Standard
A melee inspired strategy employed by our bots is called a minimum risk
 movement strategy.
 The process of carrying out a minimum risk movement strategy involves selecting
 a series of reachable points and assigning a rise factor to each of these
 points.
 The resulting action is to move to the lowest-risk location.
 Issues that are taken into account when the risk factor is calculated are
 
\end_layout

\begin_layout Subsection
Radar
\end_layout

\begin_layout Subsubsection
Narrow Lock Radar
\end_layout

\begin_layout Standard
A narrow lock radar is a form of a perfect radar.
 That is, this type of radar does not lose its lock once it has gained one.
 The concept behind implementing a narrow lock radar is simple.
 If the radar constantly points at the tracked bot's last known location,
 the laws of robocode physics do not allow the bot to esacpe.
 Further explained, the maximum distance a bot can move in any single turn
 is 8 pixels.
 A bots body is 36 pixels wide, or 18 pixels wide in either direction from
 the bot's center.
 
\end_layout

\begin_layout Standard
Based on the rules of Robocode, a minor issue arises if the enemy bot remains
 still for two or more turns.
 The effects of this rule becomes apparent after these two turns that the
 enemy bot remains still because the scanning robot will stop scanning automatic
ally if its radar is not spinning.
 To avoid losing the established lock, a call to the bot's scan function
 must be executed manually.
 Another way to overcome the issue is to keep the radar moving and to secure
 the lock by keeping the scan arc on the bot.
\end_layout

\begin_layout Subsubsection
Oldest-scanned Radar
\end_layout

\begin_layout Standard
An elementary type of melee radar that has been established is called the
 oldest scanned method.
 This strategy is intuitively effective and will cause the radar to spin
 past all bots on the battlefield and then reverse its direction until all
 bots are passed, again.
 This process is continuously repeated.
 Because a radar spin can cover an entire circle in eight ticks, the radar
 will continuously spin, instead of reversing direction, if the first spin
 takes more than four ticks to completely cover all bots.
 
\end_layout

\begin_layout Subsubsection
Spinning
\end_layout

\begin_layout Standard
Although looked at as being completely naive and elementary, a simple continuous
ly spinning radar, is used to accomplish the obvious, that is, to scan in
 a full circle around the tracking bot.
 Although relatively ineffective, the small amount of development time to
 and imagination required to implement this strategy is often used as a
 first choice strategy to gain a feel for the game or when code size is
 extremely limited.
\end_layout

\begin_layout Subsection
State Management
\end_layout

\begin_layout Standard
IBM was gracious enough to open-source some of their code
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout
http://www.ibm.com/developerworks/java/library/j-movement/
\end_layout

\end_inset


\end_layout

\end_inset

 from their article "Tracking your opponents' movement" 
\begin_inset CommandInset citation
LatexCommand cite
key "SecretsRobocodeMasters"

\end_inset

.
 The central point of this code is a state manager.
 The state manager chooses the next state of the bot by looking at all of
 the loaded states and asking each of them if they are currently valid,
 next it compares the performance characteristics of previous states, and
 chooses the best performing state.
\end_layout

\begin_layout Standard
Each robot can have several different states running at each time.
 We decided to have three states: movement, gun, and radar.
 This helps to keep the code nice and clean, each new technique we add we
 just need to make it into a new state.
 However, that is not to say that the integration required is minimal, the
 code often requires much modification.
 Some of their underlying assumptions are often wrong such as the battlefield
 always being 
\begin_inset Formula $800\times600$
\end_inset

.
\end_layout

\begin_layout Standard
We typically had two different sets of states.
 Those used for melee, that is greater than one enemy, and those for 1-vs-1,
 that is exactly one enemy.
 The states within those sets of states are then choosen based on the statistics.
\end_layout

\begin_layout Standard
This code was integrated by including it within our project and setting
 the ExtendedBot class to inherit from our own ExtendedBotUH, which then
 inherits from the actual Robocode class TeamRobot when then inherits from
 AdvancedBot.
 We then based much of our development on developing and perfecting various
 states for the robot.
 This made it much easier to create complex states that need input from
 many different events such as wave surfing.
\end_layout

\begin_layout Subsection
Team Management
\end_layout

\begin_layout Subsubsection
Problems encountered
\end_layout

\begin_layout Standard
In the course of our development of our team management we made a startling
 discovery, the TeamRobot.isTeamate() function did not work! We passed it
 the name of a teammate and it returned false.
 This was eventually traced down to a difference in representation for developme
nt versus packaged bots.
 Development bots have an asterisk in their name.
 However, when you check the names of your teammates through the TeamRobot.getTea
mmates() function it does not include the asterisk.
 We hacked around this as shown in 
\begin_inset CommandInset ref
LatexCommand prettyref
reference "alg:Fixing-Name-Bug"

\end_inset

.
 This was eventually fixed in a release of robocode near the end of our
 project.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide true
sideways false
status open

\begin_layout LyX-Code
public static String fixName(String name) {
\end_layout

\begin_deeper
\begin_layout LyX-Code
// Hack because of asterisk error
\end_layout

\begin_layout LyX-Code
if(name.contains("*")) {
\end_layout

\begin_deeper
\begin_layout LyX-Code
return name;
\end_layout

\end_deeper
\begin_layout LyX-Code
} 
\end_layout

\begin_layout LyX-Code
String fixedName = name.replace(" (", "* (");
\end_layout

\begin_layout LyX-Code
return fixedName;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Fixing Name Bug
\begin_inset CommandInset label
LatexCommand label
name "alg:Fixing-Name-Bug"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Development
\end_layout

\begin_layout Subsection
Background Research
\end_layout

\begin_layout Standard
We have done a substantial amount of basic research as mentioned in the
 previous sections.
 Our research focused on journal articles as well as the excellent source
 of practical and necessary information that is provided on the Robocode
 wiki.
\end_layout

\begin_layout Subsection
Phase 1: Individual Bots
\end_layout

\begin_layout Standard
As mentioned above, one of our main sections of progress was the basic research
 done to understand Robocode.
 We initially underestimated the amount of time for the background research
 and it has pushed our resulting schedule back.
\end_layout

\begin_layout Standard
We have done significant work on the 1-vs-1 bot implementation.
 We have implemented a narrow radar lock which points the radar at the enemy's
 last known location.
 The narrow radar lock is an example of a perfect radar lock, which means
 that the robot will never lose the lock assuming that the robot never skips
 a turn.
\end_layout

\begin_layout Standard
We have also integrated code from the IBM "Tracking your opponents' movement"
 
\begin_inset CommandInset citation
LatexCommand cite
key "SecretsRobocodeMasters"

\end_inset

.
 The central point of this code is a state manager.
 The state manager chooses the current state of the bot by looking at and
 comparing the performance characteristics of previous states.
 This code was integrated by including it within our project and setting
 it to inherit from our own ExtendedBot, which inherits from AdvancedBot.
\end_layout

\begin_layout Standard
Currently we have not conducted much work on movement and targeting beyond
 various simple movement behaviors such as strafing and moving to various
 points.
 We have also created various helper functions and classes such as one to
 be used to assist in tracking an enemy and ones to assist in moving in
 various directions and even firing at points based on their coordinates.
\end_layout

\begin_layout Subsection
Phase 2: Team Bots
\end_layout

\begin_layout Standard
Transitioning to the main focus of our project, this section discusses the
 development we have made with respect to building a team.
 Currently, we have met our initial objective for phase 2, which can be
 crudely described as implementing a simple Robocode team.
 The definition of a simple team has been extended only so far as to the
 creation of a group of robots that successfully communicate amongst each
 other.
 The extent, level, and direction of communication depends on the team model
 we wish to construct.
 As we continue to develop our Robocode team, the characteristics of the
 team as well as the communication utilized will more strictly represent
 the type of architecture and strategy we have adopted.
\end_layout

\begin_layout Section
Expected Development
\end_layout

\begin_layout Subsection
Phase 1: Individual Bots
\end_layout

\begin_layout Standard
The next part of our development will focus on implementing some advanced
 targeting and movement strategies.
 We have not decided exactly which targeting strategy we want to implement
 besides the simple head-on targeting we have already implemented.
 From our research, the next type of targeting we plan to implement is linear
 targeting which assumes that the enemy robot will continue moving in the
 same direction and at same speed as it is when spotted.
 Next we will implement circular targeting which is a slightly more advanced
 version of linear targeting and assumes that the enemy robot will continue
 moving at the same speed and same rate of rotation.
 For advanced targeting we are most likely looking at some form of statistical
 targeting.
\end_layout

\begin_layout Standard
For movement strategies we are considering some form of wave surfing.
 Wave surfing guesses when enemies have fired by looking for drops in energy
 levels.
 Every time an enemy fires it is considered to be a wave to avoid.
 The robot then looks at these wave and travels to the location that is
 least dangerous.
 Wave surfing is used by many of the champion robots along with some other
 strategies.
\end_layout

\begin_layout Subsection
Phase 2: Team Bots
\end_layout

\begin_layout Standard
While we are working on phase 1, we will also concurrently be working on
 phase 2, which is team based robots.
 Our final goal is to use a small team that uses intelligent teamwork to
 overcome the superior numbers of a larger team that uses dumb teamwork.
 Dumb teamwork means that the robots simply do not attack each other, which
 implies that no communication is actually happening.
 The general notion of intelligent teamwork should be considered to be demonstra
ted successfully if a group of n robots can consistently defeat a team of
 n+1 or more robots.
\end_layout

\begin_layout Standard
Summarizing our progress with respect to the project theme, we must transition
 from a single leader team to a multi-agent-based team, in which all agents
 contribute to the decision of the team and ultimately make their own decision
 on what action to take.
 Transitioning from our strategy of exploiting sheer numbers to intelligent
 team work will be demonstrated by a steady decrease in numbers of bots
 on our team.
 Also, although possibly being considered to be more recreational than not,
 we will further refine the size of our team to battle against the top melee
 bots in the league.
 This final task will be a demonstration of intelligent teamwork to overcome
 highly capable bots that would in many other situations be statistically
 unbeatable.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset

J.
 Frøkjær, M.
 Kristiansen, D.
 Malthesen, R.
 Suurland, P.
 Hansen, I.
 Larsen, T.
 Oddershede, "Robocode: Development of a Robocode Team," The University
 of Aalborg, Department of Computer Science, December 2004, [Online].
 Available: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.117.3830&rep=rep1&type=pdf
\end_layout

\end_inset

 {Accessed Feb, 09, 2010}.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "EvolutionEmergentBehaviors"

\end_inset

Hong, J.-H., and S.-B.
 Cho, "Evolution of Emergent Behaviors for Shooting Game Characters in Robocode"
, Congress on Evolutionary Computation, Volume 1, Pages 634–638, 2004.
 Available:
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://sclab.yonsei.ac.kr/~hjinh/PAPER/IC2004-1.pdf
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-3"

\end_inset

K.
 Hartness, "Robocode: using games to teach artificial intelligence," J.
 Comput.
 Small Coll.
 19, Apr.
 4, 2004, Pages 287-291.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-7"

\end_inset

J.
 O'Kelly and J.
 P.
 Gibson, "RoboCode & problem-based learning: a non-prescriptive approach
 to teaching programming," SIGCSE Bull.
 38, Sep.
 3, 2006, [Online].
 Available: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://doi.acm.org/10.1145/1140123.1140182
\end_layout

\end_inset

 {Accessed Feb 10, 2010}.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-8"

\end_inset

Kobayashi, K.; Uchida, Y.; Watanabe, K.; , "A study of battle strategy for
 the Robocode," SICE 2003 Annual Conference, vol.3, no., pp.
 3373- 3376 Vol.3, 4-6 Aug.
 2003 doi: 10.1109/SICE.2003.1323931 Available: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://ieeexplore.ieee.org/search/srchabstract.jsp?tp=&arnumber=1323931
\end_layout

\end_inset

{Accessed Feb 11, 2010}.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-9"

\end_inset

Y.
 Shichel, E.
 Ziserman, M.
 Sipper, "GP-Robocode: Using Genetic Programming to Evolve Robocode Players,"
 Department of Computer Science, Ben-Gurion University, Israel, [Online].
 Available: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.cs.bgu.ac.il/~sipper/papabs/eurogprobo-final.pdf
\end_layout

\end_inset

 {Accessed Feb 12, 2010}.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-10"

\end_inset

J.
 Eisenstein, "Evolving Robocode Tank Fighters." Technical Report AIM-2003-023,
 AI Lab, Massachusetts Institute Of Technology (2003) 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://citeseer.ist.psu.edu/647963.html 
\end_layout

\end_inset

{Accessed Feb 12, 2010}.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-11"

\end_inset

U.
 Endriss, N.
 Maudet, F.
 Sadri, F.
 Toni, "Logic-based Agent Communication Protocols, "Department of Computing,
 Imperial College London, [Online].
 Available: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.4.711&rep=rep1&type=pdf
\end_layout

\end_inset

 {Accessed Feb 12, 2010}.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-12"

\end_inset

R.
 Béjar, C.
 Domshlak, C.
 Fernández, C.
 Gomes, B.
 Krishnamachari, B.
 Selman, M.
 Valls, "Communication and Computation in Distributed CSP Algorithms", Artificia
l Intelligence, Volume 161, Issues 1-2, Pages 117-147, January 2005.
 Available: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.cs.cornell.edu/selman/papers/pdf/03.ants-book.pdf
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-13"

\end_inset

M.
 A.
 Salido, A.
 Giret, "Feasible distributed CSP models for scheduling problems," Engineering
 Applications of Artificial Intelligence, Volume 21, Issue 5, Pages 723-732,
 August 2008.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-14"

\end_inset

V.
 Iorio, R.
 Bigonha, M.
 Bigonha, A.
 Oliveira, E.
 Miguel, "What's the Name of the Game? Formal Specification of Artificial
 Intelligence Games," Electronic Notes in Theoretical Computer Science,
 Volume 130, Proceedings of the Brazilian Symposium on Formal Methods (SBMF
 2004), May 12, 2005, Pages 129-150, ISSN 1571-0661, DOI: 10.1016/j.entcs.2005.03.008.
 [Online].
 Available: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.sciencedirect.com/science/article/B75H1-4G604M7-8/2/5135e3dc512ba349f72
339a1fe7273bd
\end_layout

\end_inset

 {Accessed Feb 12, 2010}.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-15"

\end_inset


\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://en.wikipedia.org/wiki/Robocode
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-16"

\end_inset


\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://robowiki.net/wiki/Category:Advanced_Targeting_Strategies
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-17"

\end_inset


\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://webee.technion.ac.il/control/info/Projects/Students/2007/Avishai%20Livne/WWW
/robocode/robocode_design.doc
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "SecretsRobocodeMasters"

\end_inset

"Secrets from the Robocode Masters" 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.ibm.com/developerworks/library/j-robotips/index.html
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
\begin_inset Note Note
status open

\begin_layout Plain Layout
Change this paragraphs style to 'Standard' to enable
\end_layout

\begin_layout Plain Layout
BibTeX bibliography generation.
\end_layout

\begin_layout Plain Layout
Remember though that your final submission is supposed to have
\end_layout

\begin_layout Plain Layout
all the bibliography entries embedded in the latex file.
 This means
\end_layout

\begin_layout Plain Layout
you eventually have to copy the .bbl file into the latex file and
\end_layout

\begin_layout Plain Layout
remove the bibtex lines.
\end_layout

\end_inset


\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "your_biblio_file"
options "IEEEbib"

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
